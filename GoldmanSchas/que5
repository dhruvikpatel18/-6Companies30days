class Solution {
    public boolean isPossible(int[] nums) {
        //every no has 2 choices
        //1.become a part of existing group-> using vacant map(vm)
        //2.create a new groupv-> using Avability map(am)

        Map<Integer,Integer> am = new HashMap<>();
        Map<Integer,Integer> vm = new HashMap<>();

        for(int i:nums){
            am.put(i,am.getOrDefault(i,0)+1);
        }

        for(int i=0; i<nums.length; i++){
            if(am.get(nums[i]) <=0) continue;
            else if(vm.getOrDefault(nums[i],0) >0){
                //put in already existing group, so remove from am
                am.put(nums[i],am.getOrDefault(nums[i],0)-1);
                vm.put(nums[i],vm.getOrDefault(nums[i],0)-1);
                System.out.println("vacancy found for" + (nums[i]+1));
                //put next sequence in vm
                vm.put(nums[i]+1,vm.getOrDefault(nums[i]+1,0)+1);
            }else if(am.getOrDefault(nums[i],0)>0 && am.getOrDefault(nums[i]+1,0)>0 && am.getOrDefault(nums[i]+2,0)>0){
                //available next 3 consecutive sequences
                //remove from am
                am.put(nums[i],am.getOrDefault(nums[i],0)-1);
                am.put(nums[i]+1,am.getOrDefault(nums[i]+1,0)-1);
                am.put(nums[i]+2,am.getOrDefault(nums[i]+2,0)-1);
                //put next sequence in vm
                vm.put(nums[i]+3,vm.getOrDefault(nums[i]+3,0)+1);
            }else{
                return false;
            }
        }
        return true;
    }
}