/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray arr) {
        //first find peak element, so that we can get two sorted part
        //and then do binary search on one of the both part
        if(arr.length() < 3) return -1;

        int peak = findpeak(arr);
        int firstside = binarySearch(arr,target,0,peak);
        if(firstside == -1){
            return binarySearch(arr,target,peak+1,arr.length()-1);
        }
        return firstside;
    }
    static int findpeak(MountainArray arr){
        int start =0, end = arr.length()-1;

        while(start<end){
            int mid = start+(end-start)/2;
            if(arr.get(mid) > arr.get(mid+1)){
                end = mid;
            }else{
                start = mid+1;
            }
        }
        return start;
    }
    static int binarySearch(MountainArray arr,int target,int start,int end){
        boolean isAsc = arr.get(start) < arr.get(end);

        while(start <= end){
            int mid = start + (end-start)/2;
            if(arr.get(mid) == target) return mid;

            if(isAsc){
                if(arr.get(mid) < target) start = mid+1;
                else end = mid-1;
            }else{
                if(arr.get(mid) > target) start = mid+1;
                else end = mid-1;
            }
        }
        return -1;
    }
}